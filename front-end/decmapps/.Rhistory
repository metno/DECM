shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem(
"Menu1", startExpanded = TRUE,
menuSubItem("a", tabName = "menu1-a"),
menuSubItem("b", tabName = "menu1-b"),
menuSubItem("c", tabName = "menu1-c"),
menuSubItem("d", tabName = "menu1-d"),
menuSubItem("e", tabName = "menu1-e")
),
menuItem("Menu2", tabName = "menu2")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "menu1-a", box("a")),
tabItem(tabName = "menu1-b", box("b")),
tabItem(tabName = "menu1-c", box("c")),
tabItem(tabName = "menu1-d", box("d")),
tabItem(tabName = "menu1-e", box("e")),
tabItem(tabName = "menu2", box("I am menu2"))
),
title = "Example"
)
),
server = function(input, output) {}
)
library(shiny); runApp('test_dashboard.R')
runApp()
runApp('test_dashboard.R')
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(esd)
library(ncdf4)
psl.nobc <- retrieve.ncdf4('Downloads/NorESM_nonBC4R3_esd_2000_2010.nc',param = 'psl')
attr(psl.nobc,'units') <- 'Pa'
jan <- EOF(psl.nobc,it = 1)
jan <- EOF(psl.nobc,it = 'jan')
plot(jan)
jan <- EOF(psl.nobc,it = 'jan',ip = 2)
jan <- EOF(psl.nobc,it = 'jan',pattern = 2)
jan <- EOF(psl.nobc,it = 'jan',is = 2)
args(EOF.field)
plot.eof(jan,ip = 2)
class(jan)
dim(jan)
str(jan)
plot(jan,ip =10)
plot(jan,ip =12)
plot(jan,ip =11)
runApp()
runApp()
runApp()
runApp()
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp()
runApp('test_dashboard.R')
esd::data('Oslo')
esd::data(Oslo)
data(Oslo)
plot(data(Oslo))
data(Oslo)
plot(Oslo)
plot(data(Oslo))
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
summary(Oslo)
as.data.frame(summary(Oslo))
str(as.data.frame(summary(Oslo)))
runApp('test_dashboard.R')
df <- data.frame(Date = as.character(index(Oslo)),Value=coredata(Oslo))
df
df <- as.data.frame(summary(Oslo))
df
str(df)
t(df)
runApp('test_dashboard.R')
class(df)
runApp('test_dashboard.R')
months
month.abb
runApp('test_dashboard.R')
df <- as.data.frame(Months = month.abb, summary(Oslo))
df
runApp('test_dashboard.R')
runApp('test_dashboard.R')
? regrid
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
summary(zmap)
runApp('test_dashboard.R')
str(zmap)
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
as.character(z)
dim(z)
length(x)
length(y)
runApp('test_dashboard.R')
runApp('test_dashboard.R')
as.character(dat1$z)
dim(dat1$z)
str(dat1$z)
coredata(dat1$z)
attributes(dat1$z)
attributes(dat1$z) <- NULL
coredata(dat1$z)
runApp('test_dashboard.R')
as.character(round(coredata(dat1$z),
digits = 1))
runApp('test_dashboard.R')
runApp('test_dashboard.R')
format(Oslo,digits = 1)
class(format(Oslo,digits = 1))
runApp('test_dashboard.R')
popup = lab.popup
popupOptions()
popup
m <- leaflet() %>% addProviderTiles(providers$Esri.WorldStreetMap,
options = providerTileOptions(noWrap = TRUE)) %>% setView(lat = 64,
lng = 16, zoom = 5) %>% addRasterImage(x = r, colors = pal,
opacity = 0.65) %>% addPopups(lng = x, lat = y, popup = lab.popup)
is.na(x)
sum(is.na(x))
sum(is.na(y))
length(x)
dim(popup)
length(y)
lab.popup
runApp('test_dashboard.R')
param <- switch(tolower(as.character(param7)),
'temperature'='t2m','wet-day freq.'='fw','precip. intensity'='mu',
'precip. sum'='ptot')
runApp('test_dashboard.R')
x <- getz()
runApp('test_dashboard.R')
str(z)
runApp('test_dashboard.R')
season
print(season)
runApp('test_dashboard.R')
z <- z.reactive()
runApp('test_dashboard.R')
print(season)
n
library(shiny); runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
input$dates7
